{{ if .Values.workerCphc.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ .Values.workerCphc.name }}"
  annotations:
    configmap.reloader.stakater.com/reload: {{ .Values.existingConfigmap }}
    secret.reloader.stakater.com/reload: {{ .Values.existingSecret }}
spec:
  replicas: {{ .Values.workerCphc.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.workerCphc.name }}
  serviceName: {{ .Values.workerCphc.name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.workerCphc.name }}
        prometheus.io/app: simple-server
      {{- with .Values.workerCphc.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      securityContext:
        {{- toYaml .Values.workerCphc.podSecurityContext | nindent 8 }}
      containers:
      - name: {{ .Values.workerCphc.name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        args: ["bin/docker-worker-cphc"]
        securityContext:
          {{- toYaml .Values.workerCphc.containerSecurityContext | nindent 12 }}
        resources:
          {{- toYaml .Values.workerCphc.resources | nindent 12 }}
        envFrom:
          - secretRef:
              name: {{ .Values.existingSecret }}
          - configMapRef:
              name: {{ .Values.existingConfigmap }}
        env:
          - name: SIMPLE_SERVER_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.existingDBSecret.name }}
                key: {{ .Values.existingDBSecret.key }}
                optional: false
        volumeMounts:
        - name: logs
          mountPath: /home/app/log
      {{ if .Values.metrics.enabled }}
      - name: {{ .Values.server.name }}-exporter
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["bundle", "exec", "prometheus_exporter", "--bind", "0.0.0.0"]
        ports:
          - name: metrics
            containerPort: 9394
            protocol: TCP
      {{ end }}
      {{ if .Values.logTailer.enabled }}
      - name: log-tailer
        image: "{{ .Values.logTailer.image.repository }}:{{ .Values.logTailer.image.tag }}"
        command: ["/bin/bash", "-c", "tail -F -n 0 /home/app/log/production.log"]
        tty: true
        stdin: true
        volumeMounts:
        - name: logs
          mountPath: /home/app/log
          readOnly: true
      {{ end }}
      {{- with .Values.workerCphc.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.workerCphc.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.workerCphc.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: logs
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.workerCphc.log.storage }}
      volumeMode: Filesystem
{{ end }}
