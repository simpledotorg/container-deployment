apiVersion: batch/v1
kind: CronJob
metadata:
  name: pgback
spec:
  schedule: "{{ .Values.pgback.cronSchedule }}"
  successfulJobsHistoryLimit: "{{ .Values.pgback.successfulJobsHistoryLimit }}"
  failedJobsHistoryLimit: "{{ .Values.pgback.failedJobsHistoryLimit }}"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: pgback
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              env:
                - name: PGHOST
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Values.pgback.pgSecretName }}"
                      key: "{{ .Values.pgback.pgHostSecretKey }}"
                - name: PGUSER
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Values.pgback.pgSecretName }}"
                      key: "{{ .Values.pgback.pgUserSecretKey }}"
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Values.pgback.pgSecretName }}"
                      key: "{{ .Values.pgback.pgPasswordSecretKey }}"
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Values.pgback.s3SecretName }}"
                      key: "{{ .Values.pgback.s3SecretIDKey }}"
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Values.pgback.s3SecretName }}"
                      key: "{{ .Values.pgback.s3SecretKeyKey }}"
                - name: S3_BUCKET
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Values.pgback.s3SecretName }}"
                      key: "{{ .Values.pgback.s3BucketKey }}"
                - name: S3_ENDPOINT
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Values.pgback.s3SecretName }}"
                      key: "{{ .Values.pgback.s3EndpointKey }}"
              volumeMounts:
                - name: pgback-script
                  mountPath: /backup.sh
                  subPath: backup.sh
              args:
                - /bin/sh
                - -c
                - |
                  sh /backup.sh
          restartPolicy: OnFailure
          volumes:
            - name: pgback-script
              configMap:
                name: pgback-script
